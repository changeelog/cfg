{
  "TypeScript Interface": {
    "prefix": "tsinterface",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:propertyName}: ${3:string | number | boolean | Date | Array<T>};",
      "  ${4:optionalProperty}?: ${5:string | number};",
      "}"
    ],
    "description": "Create a TypeScript interface"
  },
  "TypeScript Enum": {
    "prefix": "tsenum",
    "body": [
      "enum ${1:EnumName} {",
      "  ${2:Value1} = '${2:Value1}',",
      "  ${3:Value2} = '${3:Value2}'",
      "}"
    ],
    "description": "Create a TypeScript enum"
  },
  "TypeScript Function": {
    "prefix": "tsfunc",
    "body": [
      "function ${1:functionName}(${2:params}: ${3:ParamType}): ${4:void | ReturnType} {",
      "  ${5:// TODO: implement}",
      "}"
    ],
    "description": "Create a TypeScript function"
  },
  "TypeScript Generic Function": {
    "prefix": "tsgenfunc",
    "body": [
      "function ${1:functionName}<T>(arg: T): T {",
      "  return arg;",
      "}"
    ],
    "description": "Create a TypeScript generic function"
  },
  "TypeScript Async Function": {
    "prefix": "tsasync",
    "body": [
      "async function ${1:functionName}(${2:params}: ${3:ParamType}): Promise<${4:ReturnType}> {",
      "  ${5:// TODO: implement}",
      "}"
    ],
    "description": "Create a TypeScript async function"
  },
  "TypeScript Arrow Function": {
    "prefix": "tsarrow",
    "body": [
      "const ${1:functionName} = (${2:params}: ${3:ParamType}): ${4:returnType} => {",
      "  ${5:// TODO: implement}",
      "};"
    ],
    "description": "Create a TypeScript arrow function"
  },
  "TypeScript Class": {
    "prefix": "tsclass",
    "body": [
      "class ${1:ClassName} {",
      "  private ${2:propertyName}: ${3:string | number};",
      "",
      "  constructor(${2:propertyName}: ${3:string | number}) {",
      "    this.${2:propertyName} = ${2:propertyName};",
      "  }",
      "",
      "  public ${4:methodName}(): ${5:void} {",
      "    ${6:// TODO: implement}",
      "  }",
      "}"
    ],
    "description": "Create a TypeScript class"
  },
  "TypeScript Interface with Generics": {
    "prefix": "tsigeneric",
    "body": [
      "interface ${1:InterfaceName}<T> {",
      "  data: T;",
      "  error?: string;",
      "}"
    ],
    "description": "Create a TypeScript interface with generics"
  },
  "TypeScript Type Alias": {
    "prefix": "tstype",
    "body": [
      "type ${1:TypeName} = {",
      "  ${2:propertyName}: ${3:string | number | boolean};",
      "  ${4:optionalProperty}?: ${5:string | number};",
      "};"
    ],
    "description": "Create a TypeScript type alias"
  },
  "TypeScript Union Type": {
    "prefix": "tsunion",
    "body": ["type ${1:UnionType} = ${2:type1} | ${3:type2};"],
    "description": "Create a TypeScript union type"
  },
  "TypeScript Intersection Type": {
    "prefix": "tsintersection",
    "body": ["type ${1:IntersectionType} = ${2:type1} & ${3:type2};"],
    "description": "Create a TypeScript intersection type"
  },
  "TypeScript Function Overloading": {
    "prefix": "tsover",
    "body": [
      "function ${1:functionName}:",
      "  (${2:params}: ${3:ParamType}): ${4:returnType};",
      "",
      "function ${1:functionName}(${2:params}: ${3:ParamType}): ${4:returnType} {",
      "  ${5:// TODO: implement}",
      "}"
    ],
    "description": "Create a TypeScript function with overloading"
  },
  "TypeScript Promise": {
    "prefix": "tsprom",
    "body": [
      "return new Promise<${1:ReturnType}>((resolve, reject) => {",
      "  ${2:// TODO: implement}",
      "});"
    ],
    "description": "Create a new Promise"
  },
  "TypeScript Destructuring": {
    "prefix": "tsdes",
    "body": ["const { ${1:propertyName} } = ${2:object};"],
    "description": "Destructure a property from an object"
  },
  "TypeScript Array Destructuring": {
    "prefix": "tsdesarr",
    "body": ["const [${1:first}, ${2:second}] = ${3:array};"],
    "description": "Destructure values from an array"
  },
  "TypeScript Type Guard": {
    "prefix": "tsguard",
    "body": [
      "function is${1:TypeName}(arg: any): arg is ${1:TypeName} {",
      "  return (arg as ${1:TypeName}).${2:property} !== undefined;",
      "}"
    ],
    "description": "Create a TypeScript type guard"
  },
  "TypeScript Generic Interface": {
    "prefix": "tsgenint",
    "body": ["interface ${1:Wrapper}<T> {", "  value: T;", "}"],
    "description": "Create a TypeScript generic interface"
  },
  "TypeScript Readonly Type": {
    "prefix": "tsreadonly",
    "body": ["type ${1:TypeName} = Readonly<${2:OriginalType}>;"],
    "description": "Create a TypeScript readonly type"
  },
  "TypeScript Optional Chaining": {
    "prefix": "tsoptchain",
    "body": ["${1:variableName}?.${2:propertyName};"],
    "description": "Use optional chaining"
  },
  "TypeScript Nullish Coalescing": {
    "prefix": "tsnullish",
    "body": ["${1:variable} ?? ${2:defaultValue};"],
    "description": "Use nullish coalescing operator"
  },
  "TypeScript Template Literal Type": {
    "prefix": "tstemplate",
    "body": ["type ${1:TemplateName} = `${2:prefix}${3:Suffix}`;"],
    "description": "Create a TypeScript template literal type"
  },
  "TypeScript Namespace": {
    "prefix": "tsnamespace",
    "body": [
      "namespace ${1:NamespaceName} {",
      "  export interface ${2:InterfaceName} {",
      "    ${3:propertyName}: ${4:string | number};",
      "  }",
      "}"
    ],
    "description": "Create a TypeScript namespace"
  }
}
