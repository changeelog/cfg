{
  "Advanced Function": {
    "prefix": "psafn",
    "description": "Create an advanced function with parameter validation",
    "body": [
      "function ${1:FunctionName} {",
      "\t[CmdletBinding()]",
      "\tparam (",
      "\t\t[Parameter(Mandatory = \\$true)]",
      "\t\t[string]\\$${2:ParameterName}",
      "\t)",
      "\t",
      "\tbegin {",
      "\t\t${3:# Initialization code}",
      "\t}",
      "\t",
      "\tprocess {",
      "\t\t${4:# Main processing code}",
      "\t}",
      "\t",
      "\tend {",
      "\t\t${5:# Cleanup code}",
      "\t}",
      "}"
    ]
  },
  "ConvertFrom-Json": {
    "prefix": "psdjf",
    "description": "Convert JSON to an object",
    "body": ["\\$object = ${1:\\$jsonString} | ConvertFrom-Json"]
  },
  "ConvertTo-Json": {
    "prefix": "psdjs",
    "description": "Convert an object to JSON",
    "body": ["\\$jsonString = ${1:\\$object} | ConvertTo-Json -Depth ${2:4}"]
  },
  "Create PowerShell Module": {
    "prefix": "psmmod",
    "description": "Create a basic structure for a PowerShell module",
    "body": [
      "\\$moduleName = '${1:MyModule}'",
      "\\$modulePath = \"$env:UserProfile\\Documents\\WindowsPowerShell\\Modules\\\\$moduleName\"",
      "",
      "# Create module directory",
      "New-Item -Path \\$modulePath -ItemType Directory -Force",
      "",
      "# Create module file",
      "@\"",
      "function Get-${1:MyModule}Function {",
      "\t[CmdletBinding()]",
      "\tparam (",
      "\t\t[Parameter(Mandatory = \\$true)]",
      "\t\t[string]\\$Parameter",
      "\t)",
      "\t",
      "\tprocess {",
      "\t\t# Function logic here",
      "\t\tWrite-Output \"Function executed with parameter: \\$Parameter\"",
      "\t}",
      "}",
      "",
      "Export-ModuleMember -Function Get-${1:MyModule}Function",
      "\"@ | Out-File -FilePath \"\\$modulePath\\\\$moduleName.psm1\"",
      "",
      "Write-Host \"Module '$moduleName' created at $modulePath\""
    ]
  },
  "Decrypt Sensitive Data": {
    "prefix": "pssecdec",
    "description": "Decrypt sensitive data from SecureString",
    "body": [
      "\\$encrypted = '${1:EncryptedData}'",
      "\\$secureString = ConvertTo-SecureString \\$encrypted",
      "\\$bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR(\\$secureString)",
      "\\$plainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\\$bstr)",
      "Write-Output \"Decrypted data: \\$plainText\"",
      "[System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR(\\$bstr) # Clean up"
    ]
  },
  "Encrypt Sensitive Data": {
    "prefix": "pssecenc",
    "description": "Encrypt sensitive data using SecureString",
    "body": [
      "\\$plainText = '${1:SensitiveData}'",
      "\\$secureString = ConvertTo-SecureString -String \\$plainText -AsPlainText -Force",
      "\\$encrypted = ConvertFrom-SecureString \\$secureString",
      "Write-Output \"Encrypted data: \\$encrypted\""
    ]
  },
  "ForEach-Object": {
    "prefix": "pscfe",
    "description": "Perform an operation on each item in a collection",
    "body": [
      "${1:\\$collection} | ForEach-Object {",
      "\t${2:# Code to execute for each item}",
      "\t\\$_${3:# Current item}",
      "}"
    ]
  },
  "Get-ChildItem": {
    "prefix": "psfls",
    "description": "List files and directories",
    "body": ["Get-ChildItem -Path ${1:Path} -Filter \"${2:*.txt}\" -Recurse"]
  },
  "Get-Content and Set-Content": {
    "prefix": "psfio",
    "description": "Read and write file content",
    "body": [
      "\\$content = Get-Content -Path ${1:filePath}",
      "\\$content = \\$content -replace '${2:oldValue}', '${3:newValue}'",
      "Set-Content -Path ${1:filePath} -Value \\$content"
    ]
  },
  "Get-Date Format": {
    "prefix": "psddt",
    "description": "Get formatted current date and time",
    "body": ["\\$dateTime = Get-Date -Format \"${1:yyyy-MM-dd HH:mm:ss}\""]
  },
  "Get-WmiObject": {
    "prefix": "psswo",
    "description": "Get WMI object information",
    "body": [
      "Get-WmiObject -Class ${1:Win32_OperatingSystem} -ComputerName ${2:computerName} | Select-Object ${3:PropertyName}"
    ]
  },
  "Invoke-Command": {
    "prefix": "psric",
    "description": "Run a command on a remote computer",
    "body": [
      "Invoke-Command -ComputerName ${1:computerName} -ScriptBlock {",
      "\t${2:# Code to run remotely}",
      "} -Credential \\$${3:credential}"
    ]
  },
  "Manage Certificates": {
    "prefix": "psseccert",
    "description": "Manage certificates in the local certificate store",
    "body": [
      "# List certificates",
      "Get-ChildItem -Path Cert:\\LocalMachine\\My | Format-Table Subject, Thumbprint, NotAfter",
      "",
      "# Import a certificate",
      "Import-PfxCertificate -FilePath '${1:path\\to\\certificate.pfx}' -CertStoreLocation Cert:\\LocalMachine\\My -Password (ConvertTo-SecureString -String '${2:password}' -AsPlainText -Force)",
      "",
      "# Export a certificate",
      "\\$cert = Get-ChildItem -Path Cert:\\LocalMachine\\My | Where-Object { \\$_.Subject -eq '${3:CN=CertificateName}' }",
      "Export-PfxCertificate -Cert \\$cert -FilePath '${4:path\\to\\export.pfx}' -Password (ConvertTo-SecureString -String '${5:exportPassword}' -AsPlainText -Force)"
    ]
  },
  "New-Hashtable": {
    "prefix": "psdht",
    "description": "Create a new hashtable",
    "body": [
      "\\$${1:hashtableName} = @{",
      "\t${2:Key1} = ${3:Value1}",
      "\t${4:Key2} = ${5:Value2}",
      "}"
    ]
  },
  "New-PSDrive": {
    "prefix": "psfpd",
    "description": "Create a new PowerShell drive",
    "body": [
      "New-PSDrive -Name ${1:driveName} -PSProvider ${2|FileSystem,Registry,WSMan|} -Root ${3:path}"
    ]
  },
  "Read-Host Secure": {
    "prefix": "psisec",
    "description": "Read secure string input from the console",
    "body": [
      "\\$${1:secureString} = Read-Host -Prompt \"${2:Enter password}\" -AsSecureString"
    ]
  },
  "Start-Job": {
    "prefix": "psjob",
    "description": "Start a background job",
    "body": [
      "\\$job = Start-Job -ScriptBlock {",
      "\t${1:# Code to run in background}",
      "}",
      "Wait-Job \\$job",
      "Receive-Job \\$job"
    ]
  },
  "Switch Statement": {
    "prefix": "pscsw",
    "description": "Create a switch statement",
    "body": [
      "switch (${1:\\$variable}) {",
      "\t${2:condition1} { ${3:# Action for condition1} }",
      "\t${4:condition2} { ${5:# Action for condition2} }",
      "\tdefault { ${6:# Default action} }",
      "}"
    ]
  },
  "Try-Catch": {
    "prefix": "psctc",
    "description": "Try-Catch block for error handling",
    "body": [
      "try {",
      "\t${1:# Code that may throw an exception}",
      "} catch {",
      "\tWrite-Error \"An error occurred: $_\"",
      "}"
    ]
  },
  "Where-Object": {
    "prefix": "pscwh",
    "description": "Filter items in a collection",
    "body": [
      "${1:\\$collection} | Where-Object { \\$_.${2:Property} -${3|eq,ne,gt,lt,ge,le|} ${4:Value} }"
    ]
  },
  "Write-Error": {
    "prefix": "psoerr",
    "description": "Write an error message",
    "body": [
      "Write-Error \"${1:ErrorMessage}\" -ErrorAction ${2|Stop,Continue,SilentlyContinue|}"
    ]
  },
  "Write-Output": {
    "prefix": "psoo",
    "description": "Write output to the pipeline",
    "body": ["Write-Output \"${1:Message}\""]
  }
}
