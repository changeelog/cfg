{
  "anonymous function": {
    "prefix": "jsaf",
    "description": "anonymous function",
    "body": [
      "function (${1:arguments}) {",
      "  ${0}",
      "}"
    ]
  },
  "arrow function": {
    "prefix": "jsarr",
    "description": "arrow function (ES6)",
    "body": [
      "(${1:arguments}) => ${2:statement}"
    ]
  },
  "arrow function with body": {
    "prefix": "jsarrb",
    "description": "arrow function with body (ES6)",
    "body": [
      "(${1:arguments}) => {",
      "  ${0}",
      "}"
    ]
  },
  "const assignment": {
    "prefix": "jsca",
    "description": "const assignment",
    "body": [
      "const ${1:name} = ${2:value}"
    ]
  },
  "const statement": {
    "prefix": "jsc",
    "description": "const statement",
    "body": [
      "const ${0}"
    ]
  },
  "destructuring const assignment": {
    "prefix": "jsdca",
    "description": "destructuring const assignment",
    "body": [
      "const {${1:name}} = ${2:value}"
    ]
  },
  "destructuring let assignment": {
    "prefix": "jsdla",
    "description": "destructuring let assignment",
    "body": [
      "let {${1:name}} = ${2:value}"
    ]
  },
  "else if statement": {
    "prefix": "jsei",
    "description": "else if statement",
    "body": [
      "else if (${1:condition}) {",
      "  ${0}",
      "}"
    ]
  },
  "else statement": {
    "prefix": "jse",
    "description": "else statement",
    "body": [
      "else {",
      "  ${0}",
      "}"
    ]
  },
  "for in loop": {
    "prefix": "jsfi",
    "description": "for in loop",
    "body": [
      "for (let ${1:key} in ${2:array}) {",
      "  if (${2:array}.hasOwnProperty(${1:key})) {",
      "    ${0}",
      "  }",
      "}"
    ]
  },
  "for loop": {
    "prefix": "jsfl",
    "description": "for loop",
    "body": [
      "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {",
      "  ${0}",
      "}"
    ]
  },
  "for of loop": {
    "prefix": "jsfo",
    "description": "for of loop (ES6)",
    "body": [
      "for (let ${1:key} of ${2:array}) {",
      "  ${0}",
      "}"
    ]
  },
  "function apply": {
    "prefix": "jsfa",
    "description": "function apply",
    "body": [
      "${1:fn}.apply(${2:this}, ${3:arguments})"
    ]
  },
  "function bind": {
    "prefix": "jsfb",
    "description": "function bind",
    "body": [
      "${1:fn}.bind(${2:this}, ${3:arguments})"
    ]
  },
  "function call": {
    "prefix": "jsfc",
    "description": "function call",
    "body": [
      "${1:fn}.call(${2:this}, ${3:arguments})"
    ]
  },
  "generator function": {
    "prefix": "jsgf",
    "description": "generator function (ES6)",
    "body": [
      "function* (${1:arguments}) {",
      "  ${0}",
      "}"
    ]
  },
  "if statement": {
    "prefix": "jsif",
    "description": "if statement",
    "body": [
      "if (${1:condition}) {",
      "  ${0}",
      "}"
    ]
  },
  "if/else statement": {
    "prefix": "jsife",
    "description": "if/else statement",
    "body": [
      "if (${1:condition}) {",
      "  ${0}",
      "} else {",
      "  ",
      "}"
    ]
  },
  "immediately-invoked function expression": {
    "prefix": "jsiife",
    "description": "immediately-invoked function expression (IIFE)",
    "body": [
      "((${1:arguments}) => {",
      "  ${0}",
      "})(${2})"
    ]
  },
  "let assignment": {
    "prefix": "jsla",
    "description": "let assignment",
    "body": [
      "let ${1:name} = ${2:value}"
    ]
  },
  "let statement": {
    "prefix": "jsl",
    "description": "let statement",
    "body": [
      "let ${0}"
    ]
  },
  "named function": {
    "prefix": "jsnf",
    "description": "named function",
    "body": [
      "function ${1:name}(${2:arguments}) {",
      "  ${0}",
      "}"
    ]
  },
  "named generator function": {
    "prefix": "jsngf",
    "description": "named generator function (ES6)",
    "body": [
      "function* ${1:name}(${2:arguments}) {",
      "  ${0}",
      "}"
    ]
  },
  "reverse for loop": {
    "prefix": "jsrfl",
    "description": "reverse for loop",
    "body": [
      "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {",
      "  ${0}",
      "}"
    ]
  },
  "switch case": {
    "prefix": "jssw",
    "description": "switch case",
    "body": [
      "switch (${1:expr}) {",
      "  case ${2:value}:",
      "    return $0",
      "  default:",
      "    return",
      "}"
    ]
  },
  "ternary operator": {
    "prefix": "jster",
    "description": "ternary operator",
    "body": [
      "${1:condition} ? ${2:expression} : ${3:expression}"
    ]
  },
  "try/catch": {
    "prefix": "jstc",
    "description": "try/catch",
    "body": [
      "try {",
      "  ${0}",
      "} catch (${1:err}) {",
      "  ",
      "}"
    ]
  },
  "try/catch/finally": {
    "prefix": "jstcf",
    "description": "try/catch/finally",
    "body": [
      "try {",
      "  ${0}",
      "} catch (${1:err}) {",
      "  ",
      "} finally {",
      "  ",
      "}"
    ]
  },
  "try/finally": {
    "prefix": "jstf",
    "description": "try/finally",
    "body": [
      "try {",
      "  ${0}",
      "} finally {",
      "  ",
      "}"
    ]
  },
  "var assignment": {
    "prefix": "jsva",
    "description": "var assignment",
    "body": [
      "var ${1:name} = ${2:value}"
    ]
  },
  "var statement": {
    "prefix": "jsv",
    "description": "var statement",
    "body": [
      "var ${0}"
    ]
  },
  "while loop": {
    "prefix": "jswl",
    "description": "while loop",
    "body": [
      "while (${1:condition}) {",
      "  ${0}",
      "}"
    ]
  }
}