{
  "Imports": {
    "imp": {
      "prefix": "imp",
      "body": ["import ${1:moduleName} from '${2:module}';"],
      "description": "Import a module"
    },
    "imn": {
      "prefix": "imn",
      "body": ["import '${1:module}';"],
      "description": "Import a module without assigning"
    },
    "imd": {
      "prefix": "imd",
      "body": ["import { ${1:destructuredModule} } from '${2:module}';"],
      "description": "Import destructured module"
    },
    "ime": {
      "prefix": "ime",
      "body": ["import * as ${1:alias} from '${2:module}';"],
      "description": "Import all as alias"
    },
    "ima": {
      "prefix": "ima",
      "body": [
        "import { ${1:originalName} as ${2:aliasName} } from '${3:module}';"
      ],
      "description": "Import with alias"
    },
    "exp": {
      "prefix": "exp",
      "body": ["export default ${1:moduleName};"],
      "description": "Export default module"
    },
    "exd": {
      "prefix": "exd",
      "body": ["export { ${1:destructuredModule} } from '${2:module}';"],
      "description": "Export destructured module"
    },
    "exa": {
      "prefix": "exa",
      "body": [
        "export { ${1:originalName} as ${2:aliasName} } from '${3:module}';"
      ],
      "description": "Export with alias"
    }
  },
  "Functions": {
    "nfn": {
      "prefix": "nfn",
      "body": [
        "const ${1:functionName} = (${2:params}) => {",
        "  ${3:// TODO: implement}",
        "};"
      ],
      "description": "Define a regular arrow function"
    },
    "dob": {
      "prefix": "dob",
      "body": ["const { ${1:propName} } = ${2:objectToDestruct};"],
      "description": "Destructure props from an object"
    },
    "dar": {
      "prefix": "dar",
      "body": ["const [${1:propName}] = ${2:arrayToDestruct};"],
      "description": "Destructure from an array"
    },
    "sti": {
      "prefix": "sti",
      "body": [
        "setInterval(() => {",
        "  ${1:// TODO: implement}",
        "}, ${2:intervalTime});"
      ],
      "description": "Set an interval"
    },
    "sto": {
      "prefix": "sto",
      "body": [
        "setTimeout(() => {",
        "  ${1:// TODO: implement}",
        "}, ${2:delayTime});"
      ],
      "description": "Set a timeout"
    },
    "prom": {
      "prefix": "prom",
      "body": [
        "return new Promise<${1:ReturnType}>((resolve, reject) => {",
        "  ${2:// TODO: implement}",
        "});"
      ],
      "description": "Create a new Promise"
    },
    "cmmb": {
      "prefix": "cmmb",
      "body": ["/**", " * ${1:Comment Block}", " */"],
      "description": "Create a comment block"
    },
    "cp": {
      "prefix": "cp",
      "body": ["const { ${1:propName} } = this.props;"],
      "description": "Destructure props in a class component"
    },
    "cs": {
      "prefix": "cs",
      "body": ["const { ${1:stateName} } = this.state;"],
      "description": "Destructure state in a class component"
    }
  },
  "React Lifecycle Methods": {
    "cdm": {
      "prefix": "cdm",
      "body": ["componentDidMount() {", "  ${1:// TODO: implement}", "}"],
      "description": "Component Did Mount"
    },
    "scu": {
      "prefix": "scu",
      "body": [
        "shouldComponentUpdate(nextProps, nextState) {",
        "  return ${1:true};",
        "}"
      ],
      "description": "Should Component Update"
    },
    "cdup": {
      "prefix": "cdup",
      "body": [
        "componentDidUpdate(prevProps, prevState) {",
        "  ${1:// TODO: implement}",
        "}"
      ],
      "description": "Component Did Update"
    },
    "cwun": {
      "prefix": "cwun",
      "body": ["componentWillUnmount() {", "  ${1:// TODO: implement}", "}"],
      "description": "Component Will Unmount"
    },
    "gdsfp": {
      "prefix": "gdsfp",
      "body": [
        "static getDerivedStateFromProps(nextProps, prevState) {",
        "  return ${1:null};",
        "}"
      ],
      "description": "Static Get Derived State From Props"
    },
    "gsbu": {
      "prefix": "gsbu",
      "body": [
        "getSnapshotBeforeUpdate(prevProps, prevState) {",
        "  return ${1:null};",
        "}"
      ],
      "description": "Get Snapshot Before Update"
    },
    "sst": {
      "prefix": "sst",
      "body": ["this.setState({", "  ${1:stateKey}: ${2:value}", "});"],
      "description": "Set state"
    },
    "ssf": {
      "prefix": "ssf",
      "body": [
        "this.setState((state, props) => {",
        "  return {",
        "    ${1:stateKey}: ${2:value}",
        "  };",
        "});"
      ],
      "description": "Set state with function"
    },
    "props": {
      "prefix": "props",
      "body": ["this.props.${1:propName};"],
      "description": "Access prop"
    },
    "state": {
      "prefix": "state",
      "body": ["this.state.${1:stateName};"],
      "description": "Access state"
    }
  },
  "React Context": {
    "rcontext": {
      "prefix": "rcontext",
      "body": [
        "const ${1:ContextName} = React.createContext<${2:ContextType}>(${3:defaultValue});"
      ],
      "description": "Create a React context"
    }
  },
  "Refs": {
    "cref": {
      "prefix": "cref",
      "body": ["this.${1:refName}Ref = React.createRef<${2:RefType}>();"],
      "description": "Create a class component ref"
    },
    "fref": {
      "prefix": "fref",
      "body": ["const ${1:refName} = React.createRef<${2:RefType}>();"],
      "description": "Create a functional component ref"
    }
  },
  "Binding": {
    "bnd": {
      "prefix": "bnd",
      "body": ["this.${1:methodName} = this.${1:methodName}.bind(this);"],
      "description": "Bind method in constructor"
    }
  },
  "React Native": {
    "imrn": {
      "prefix": "imrn",
      "body": ["import { ${1:ComponentName} } from 'react-native';"],
      "description": "Import component from React Native"
    },
    "rnstyle": {
      "prefix": "rnstyle",
      "body": [
        "const styles = StyleSheet.create({",
        "  ${1:styleName}: {",
        "    ${2:property}: ${3:value},",
        "  },",
        "});"
      ],
      "description": "Create styles in React Native"
    }
  },
  "Redux": {
    "rxaction": {
      "prefix": "rxaction",
      "body": [
        "export const ${1:actionName} = () => ({",
        "  type: '${2:ACTION_TYPE}',",
        "  payload: ${3:payload},",
        "});"
      ],
      "description": "Redux action template"
    },
    "rxconst": {
      "prefix": "rxconst",
      "body": ["export const ${1:ACTION_TYPE} = '${1:ACTION_TYPE}';"],
      "description": "Redux action type constant"
    },
    "rxreducer": {
      "prefix": "rxreducer",
      "body": [
        "const initialState = {",
        "  ${1:stateKey}: ${2:initialValue},",
        "};",
        "",
        "const ${3:reducerName} = (state = initialState, action) => {",
        "  switch (action.type) {",
        "    case '${4:ACTION_TYPE}':",
        "      return {",
        "        ...state,",
        "        ${5:stateKey}: action.payload,",
        "      };",
        "    default:",
        "      return state;",
        "  }",
        "};",
        "",
        "export default ${3:reducerName};"
      ],
      "description": "Redux reducer template"
    },
    "rxaction": {
      "prefix": "rxaction",
      "body": [
        "export const ${1:actionName} = () => ({",
        "  type: '${2:ACTION_TYPE}',",
        "  payload: ${3:payload},",
        "});"
      ],
      "description": "Redux action template"
    },
    "rxconst": {
      "prefix": "rxconst",
      "body": ["export const ${1:ACTION_TYPE} = '${1:ACTION_TYPE}';"],
      "description": "Redux action type constant"
    },
    "rxreducer": {
      "prefix": "rxreducer",
      "body": [
        "const initialState = {",
        "  ${1:stateKey}: ${2:initialValue},",
        "};",
        "",
        "const ${3:reducerName} = (state = initialState, action) => {",
        "  switch (action.type) {",
        "    case '${4:ACTION_TYPE}':",
        "      return {",
        "        ...state,",
        "        ${5:stateKey}: action.payload,",
        "      };",
        "    default:",
        "      return state;",
        "  }",
        "};",
        "",
        "export default ${3:reducerName};"
      ],
      "description": "Redux reducer template"
    },
    "rxselect": {
      "prefix": "rxselect",
      "body": [
        "export const ${1:selectorName} = (state) => state.${2:reducerName}.${3:stateKey};"
      ],
      "description": "Redux selector template"
    },
    "rxslice": {
      "prefix": "rxslice",
      "body": [
        "import { createSlice } from '@reduxjs/toolkit';",
        "",
        "const ${1:sliceName} = createSlice({",
        "  name: '${1:sliceName}',",
        "  initialState: {",
        "    ${2:stateKey}: ${3:initialValue},",
        "  },",
        "  reducers: {",
        "    ${4:actionName}(state, action) {",
        "      state.${2:stateKey} = action.payload;",
        "    },",
        "  },",
        "});",
        "",
        "export const { ${4:actionName} } = ${1:sliceName}.actions;",
        "export default ${1:sliceName}.reducer;"
      ],
      "description": "Redux slice template using Redux Toolkit"
    }
  },
  "PropTypes": {
    "pta": {
      "prefix": "pta",
      "body": ["PropTypes.array"],
      "description": "PropTypes for an array"
    },
    "ptar": {
      "prefix": "ptar",
      "body": ["PropTypes.array.isRequired"],
      "description": "Required PropTypes for an array"
    },
    "ptb": {
      "prefix": "ptb",
      "body": ["PropTypes.bool"],
      "description": "PropTypes for a boolean"
    },
    "ptbr": {
      "prefix": "ptbr",
      "body": ["PropTypes.bool.isRequired"],
      "description": "Required PropTypes for a boolean"
    },
    "ptf": {
      "prefix": "ptf",
      "body": ["PropTypes.func"],
      "description": "PropTypes for a function"
    },
    "ptfr": {
      "prefix": "ptfr",
      "body": ["PropTypes.func.isRequired"],
      "description": "Required PropTypes for a function"
    },
    "ptn": {
      "prefix": "ptn",
      "body": ["PropTypes.number"],
      "description": "PropTypes for a number"
    },
    "ptnr": {
      "prefix": "ptnr",
      "body": ["PropTypes.number.isRequired"],
      "description": "Required PropTypes for a number"
    },
    "pto": {
      "prefix": "pto",
      "body": ["PropTypes.object"],
      "description": "PropTypes for an object"
    },
    "ptor": {
      "prefix": "ptor",
      "body": ["PropTypes.object.isRequired"],
      "description": "Required PropTypes for an object"
    },
    "pts": {
      "prefix": "pts",
      "body": ["PropTypes.string"],
      "description": "PropTypes for a string"
    },
    "ptsr": {
      "prefix": "ptsr",
      "body": ["PropTypes.string.isRequired"],
      "description": "Required PropTypes for a string"
    },
    "ptnd": {
      "prefix": "ptnd",
      "body": ["PropTypes.node"],
      "description": "PropTypes for a node"
    },
    "ptndr": {
      "prefix": "ptndr",
      "body": ["PropTypes.node.isRequired"],
      "description": "Required PropTypes for a node"
    },
    "ptel": {
      "prefix": "ptel",
      "body": ["PropTypes.element"],
      "description": "PropTypes for an element"
    },
    "ptelr": {
      "prefix": "ptelr",
      "body": ["PropTypes.element.isRequired"],
      "description": "Required PropTypes for an element"
    },
    "pti": {
      "prefix": "pti",
      "body": ["PropTypes.instanceOf(${1:ClassName})"],
      "description": "PropTypes for an instance of a class"
    },
    "ptir": {
      "prefix": "ptir",
      "body": ["PropTypes.instanceOf(${1:ClassName}).isRequired"],
      "description": "Required PropTypes for an instance of a class"
    },
    "pte": {
      "prefix": "pte",
      "body": ["PropTypes.oneOf([${1:value1}, ${2:value2}])"],
      "description": "PropTypes for one of specified values"
    },
    "pter": {
      "prefix": "pter",
      "body": ["PropTypes.oneOf([${1:value1}, ${2:value2}]).isRequired"],
      "description": "Required PropTypes for one of specified values"
    },
    "ptet": {
      "prefix": "ptet",
      "body": ["PropTypes.oneOfType([${1:type1}, ${2:type2}])"],
      "description": "PropTypes for one of specified types"
    },
    "ptetr": {
      "prefix": "ptetr",
      "body": ["PropTypes.oneOfType([${1:type1}, ${2:type2}]).isRequired"],
      "description": "Required PropTypes for one of specified types"
    },
    "ptao": {
      "prefix": "ptao",
      "body": ["PropTypes.arrayOf(${1:type})"],
      "description": "PropTypes for an array of specified type"
    },
    "ptaor": {
      "prefix": "ptaor",
      "body": ["PropTypes.arrayOf(${1:type}).isRequired"],
      "description": "Required PropTypes for an array of specified type"
    },
    "ptoo": {
      "prefix": "ptoo",
      "body": ["PropTypes.objectOf(${1:type})"],
      "description": "PropTypes for an object of specified type"
    },
    "ptoor": {
      "prefix": "ptoor",
      "body": ["PropTypes.objectOf(${1:type}).isRequired"],
      "description": "Required PropTypes for an object of specified type"
    },
    "ptsh": {
      "prefix": "ptsh",
      "body": ["PropTypes.shape({", "  ${1:key}: ${2:type},", "})"],
      "description": "PropTypes for a shape"
    },
    "ptshr": {
      "prefix": "ptshr",
      "body": ["PropTypes.shape({", "  ${1:key}: ${2:type},", "}).isRequired"],
      "description": "Required PropTypes for a shape"
    },
    "ptany": {
      "prefix": "ptany",
      "body": ["PropTypes.any"],
      "description": "PropTypes for any type"
    },
    "ptypes": {
      "prefix": "ptypes",
      "body": ["static propTypes = {", "  ${1:propName}: ${2:PropType},", "};"],
      "description": "Static propTypes declaration"
    }
  },
  "Console": {
    "clo": {
      "prefix": "clo",
      "body": ["console.log(`object`, ${1:object});"],
      "description": "Console log an object with label"
    },
    "clj": {
      "prefix": "clj",
      "body": ["console.log(`object`, JSON.stringify(${1:object}, null, 2));"],
      "description": "Console log an object as formatted JSON"
    },
    "ctm": {
      "prefix": "ctm",
      "body": ["console.time(`timeId`);"],
      "description": "Start a timer"
    },
    "cte": {
      "prefix": "cte",
      "body": ["console.timeEnd(`timeId`);"],
      "description": "End a timer"
    },
    "cas": {
      "prefix": "cas",
      "body": ["console.assert(${1:expression}, ${2:object});"],
      "description": "Console assert"
    },
    "ccl": {
      "prefix": "ccl",
      "body": ["console.clear();"],
      "description": "Clear the console"
    },
    "cco": {
      "prefix": "cco",
      "body": ["console.count(${1:label});"],
      "description": "Console count"
    },
    "cdi": {
      "prefix": "cdi",
      "body": ["console.dir(${1:object});"],
      "description": "Console dir"
    },
    "cer": {
      "prefix": "cer",
      "body": ["console.error(${1:object});"],
      "description": "Console error"
    },
    "cgr": {
      "prefix": "cgr",
      "body": ["console.group(${1:label});"],
      "description": "Console group"
    },
    "cge": {
      "prefix": "cge",
      "body": ["console.groupEnd();"],
      "description": "End console group"
    },
    "ctr": {
      "prefix": "ctr",
      "body": ["console.trace(${1:object});"],
      "description": "Console trace"
    },
    "cwa": {
      "prefix": "cwa",
      "body": ["console.warn(${1:object});"],
      "description": "Console warn"
    },
    "cin": {
      "prefix": "cin",
      "body": ["console.info(${1:object});"],
      "description": "Console info"
    }
  }
}
