{
  "Alter Table": {
    "prefix": "at",
    "description": "Alter an existing table",
    "body": [
      "ALTER TABLE ${1:table_name}",
      "${2|ADD,DROP,MODIFY|} ${3:column_name} ${4:datatype};"
    ]
  },
  "Case When": {
    "prefix": "case",
    "description": "Create a CASE WHEN statement",
    "body": [
      "CASE",
      "\tWHEN ${1:condition1} THEN ${2:result1}",
      "\tWHEN ${3:condition2} THEN ${4:result2}",
      "\tELSE ${5:result3}",
      "END AS ${6:alias}"
    ]
  },
  "Common Table Expression": {
    "prefix": "cte",
    "description": "Create a Common Table Expression (CTE)",
    "body": [
      "WITH ${1:cte_name} AS (",
      "\tSELECT ${2:columns}",
      "\tFROM ${3:table_name}",
      "\tWHERE ${4:condition}",
      ")",
      "SELECT ${5:columns}",
      "FROM ${1:cte_name}",
      "WHERE ${6:condition};"
    ]
  },
  "Create Function": {
    "prefix": "cf",
    "description": "Create a SQL function",
    "body": [
      "CREATE FUNCTION ${1:function_name} (${2:parameters})",
      "RETURNS ${3:return_type} AS $$",
      "BEGIN",
      "\t${4:-- Function body}",
      "\tRETURN ${5:result};",
      "END;",
      "$$ LANGUAGE plpgsql;"
    ]
  },
  "Create Index": {
    "prefix": "ci",
    "description": "Create an index on a table",
    "body": "CREATE ${1|INDEX,UNIQUE INDEX|} ${2:index_name} ON ${3:table_name} (${4:column_name});"
  },
  "Create Materialized View": {
    "prefix": "cmv",
    "description": "Create a materialized view",
    "body": [
      "CREATE MATERIALIZED VIEW ${1:view_name}",
      "AS",
      "SELECT ${2:columns}",
      "FROM ${3:table_name}",
      "WHERE ${4:condition}",
      "WITH DATA;"
    ]
  },
  "Create Procedure": {
    "prefix": "cp",
    "description": "Create a SQL procedure",
    "body": [
      "CREATE PROCEDURE ${1:procedure_name} (${2:parameters})",
      "LANGUAGE plpgsql",
      "AS $$",
      "BEGIN",
      "\t${3:-- Procedure body}",
      "END;",
      "$$;"
    ]
  },
  "Create Table": {
    "prefix": "ct",
    "description": "Create a new table",
    "body": [
      "CREATE TABLE ${1:table_name} (",
      "\t${2:column1} ${3:datatype}${4: PRIMARY KEY},",
      "\t${5:column2} ${6:datatype}",
      ");"
    ]
  },
  "Create Trigger": {
    "prefix": "ct",
    "description": "Create a trigger",
    "body": [
      "CREATE TRIGGER ${1:trigger_name}",
      "${2|BEFORE,AFTER,INSTEAD OF|} ${3|INSERT,UPDATE,DELETE|}",
      "ON ${4:table_name}",
      "FOR EACH ROW",
      "BEGIN",
      "\t${5:-- Trigger logic}",
      "END;"
    ]
  },
  "Create View": {
    "prefix": "cv",
    "description": "Create a view",
    "body": [
      "CREATE VIEW ${1:view_name} AS",
      "SELECT ${2:columns}",
      "FROM ${3:table_name}",
      "WHERE ${4:condition};"
    ]
  },
  "Delete": {
    "prefix": "del",
    "description": "Delete rows from a table",
    "body": "DELETE FROM ${1:table_name} WHERE ${2:condition};"
  },
  "Explain Analyze": {
    "prefix": "expa",
    "description": "Explain and analyze a query execution plan",
    "body": "EXPLAIN ANALYZE ${1:query};"
  },
  "Explain Query": {
    "prefix": "exp",
    "description": "Explain a query execution plan",
    "body": "EXPLAIN ${1:query};"
  },
  "Group By": {
    "prefix": "gb",
    "description": "Group By with optional HAVING clause",
    "body": [
      "SELECT ${1:column1}${2:, COUNT(*) as count}",
      "FROM ${3:table_name}",
      "GROUP BY ${1:column1}${4: HAVING ${5:condition}};"
    ]
  },
  "Insert": {
    "prefix": "ins",
    "description": "Insert new row into a table",
    "body": [
      "INSERT INTO ${1:table_name} (${2:column1}${3:, column2})",
      "VALUES (${4:value1}${5:, value2});"
    ]
  },
  "Join": {
    "prefix": "jo",
    "description": "Join two tables",
    "body": [
      "SELECT ${1:*}",
      "FROM ${2:table1} ${3:t1}",
      "${4|INNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN|} ${5:table2} ${6:t2} ON ${7:t1.column} = ${8:t2.column};"
    ]
  },
  "Merge": {
    "prefix": "merge",
    "description": "Perform a MERGE operation",
    "body": [
      "MERGE INTO ${1:target_table} t",
      "USING ${2:source_table} s",
      "ON (t.${3:key_column} = s.${3:key_column})",
      "WHEN MATCHED THEN",
      "\tUPDATE SET ${4:column1} = s.${4:column1}${5:, column2 = s.column2}",
      "WHEN NOT MATCHED THEN",
      "\tINSERT (${6:columns}) VALUES (${7:values});"
    ]
  },
  "Pivot": {
    "prefix": "pivot",
    "description": "Create a PIVOT query",
    "body": [
      "SELECT *",
      "FROM (",
      "\tSELECT ${1:column1}, ${2:column2}, ${3:value_column}",
      "\tFROM ${4:table_name}",
      ") AS SourceTable",
      "PIVOT (",
      "\t${5:aggregate_function}(${3:value_column})",
      "\tFOR ${2:column2} IN (${6:pivot_values})",
      ") AS PivotTable;"
    ]
  },
  "Recursive CTE": {
    "prefix": "rcte",
    "description": "Create a recursive Common Table Expression",
    "body": [
      "WITH RECURSIVE ${1:cte_name} AS (",
      "\t-- Base case",
      "\tSELECT ${2:columns}",
      "\tFROM ${3:table_name}",
      "\tWHERE ${4:condition}",
      "\tUNION ALL",
      "\t-- Recursive case",
      "\tSELECT ${5:columns}",
      "\tFROM ${3:table_name} t",
      "\tJOIN ${1:cte_name} c ON ${6:join_condition}",
      ")",
      "SELECT * FROM ${1:cte_name};"
    ]
  },
  "Select All": {
    "prefix": "sa",
    "description": "Select all columns from a table with optional WHERE clause",
    "body": "SELECT * FROM ${1:table_name}${2: WHERE ${3:condition}};"
  },
  "Select Columns": {
    "prefix": "sc",
    "description": "Select specific columns from a table with optional WHERE clause",
    "body": "SELECT ${1:column1}${2:, column2} FROM ${3:table_name}${4: WHERE ${5:condition}};"
  },
  "Subquery": {
    "prefix": "sub",
    "description": "Create a subquery",
    "body": [
      "SELECT ${1:column1}",
      "FROM ${2:table1}",
      "WHERE ${3:column2} ${4|IN,NOT IN,>,<,=|} (",
      "\tSELECT ${5:column3}",
      "\tFROM ${6:table2}",
      "\tWHERE ${7:condition}",
      ");"
    ]
  },
  "Transaction": {
    "prefix": "tran",
    "description": "Create a transaction block",
    "body": ["BEGIN TRANSACTION;", "\t${1:-- SQL statements}", "COMMIT;"]
  },
  "Update": {
    "prefix": "upd",
    "description": "Update existing rows in a table",
    "body": [
      "UPDATE ${1:table_name}",
      "SET ${2:column1} = ${3:value1}${4:, column2 = value2}",
      "WHERE ${5:condition};"
    ]
  },
  "Upsert": {
    "prefix": "upsert",
    "description": "Perform an upsert operation",
    "body": [
      "INSERT INTO ${1:table_name} (${2:columns})",
      "VALUES (${3:values})",
      "ON CONFLICT (${4:conflict_column})",
      "DO UPDATE SET",
      "\t${5:column1} = EXCLUDED.${5:column1}${6:, column2 = EXCLUDED.column2};"
    ]
  },
  "Window Function": {
    "prefix": "wf",
    "description": "Create a window function",
    "body": [
      "SELECT ${1:column1},",
      "\t${2:window_function}(${3:column2}) OVER (",
      "\t\tPARTITION BY ${4:column3}",
      "\t\tORDER BY ${5:column4}",
      "\t) AS ${6:alias}",
      "FROM ${7:table_name};"
    ]
  }
}
