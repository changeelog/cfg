{
  "Assert": {
    "prefix": "luaas",
    "description": "Assert a condition",
    "body": [
      "assert(${1:condition}, \"${2:error message}\")"
    ]
  },
  "Class": {
    "prefix": "luacl",
    "description": "Create a simple class",
    "body": [
      "local ${1:ClassName} = {}",
      "${1:ClassName}.__index = ${1:ClassName}",
      "",
      "function ${1:ClassName}:new(${2:args})",
      "\tlocal self = setmetatable({}, ${1:ClassName})",
      "\t${0:-- initialization}",
      "\treturn self",
      "end",
      "",
      "return ${1:ClassName}"
    ]
  },
  "Coroutine Create": {
    "prefix": "luacc",
    "description": "Create a coroutine",
    "body": [
      "local ${1:coName} = coroutine.create(function()",
      "\t${0:-- coroutine body}",
      "end)"
    ]
  },
  "Coroutine Resume": {
    "prefix": "luacr",
    "description": "Resume a coroutine",
    "body": [
      "coroutine.resume(${1:coName})"
    ]
  },
  "Coroutine Yield": {
    "prefix": "luacy",
    "description": "Yield from a coroutine",
    "body": [
      "coroutine.yield(${1:value})"
    ]
  },
  "Elseif Statement": {
    "prefix": "luaei",
    "description": "Elseif statement",
    "body": [
      "elseif ${1:condition} then",
      "\t${0:-- body}"
    ]
  },
  "Error Handling": {
    "prefix": "luaeh",
    "description": "Protected call for error handling",
    "body": [
      "local success, result = pcall(function()",
      "\t${1:-- protected call body}",
      "end)",
      "",
      "if not success then",
      "\tprint(\"Error: \" .. result)",
      "end"
    ]
  },
  "File Open": {
    "prefix": "luafo",
    "description": "Open and handle a file",
    "body": [
      "local file = io.open(\"${1:filename}\", \"${2:r}\")",
      "if file then",
      "\t${0:-- file operations}",
      "\tfile:close()",
      "else",
      "\tprint(\"Unable to open file\")",
      "end"
    ]
  },
  "For Loop": {
    "prefix": "luafl",
    "description": "Numeric for loop",
    "body": [
      "for ${1:i} = ${2:1}, ${3:10} do",
      "\t${0:-- body}",
      "end"
    ]
  },
  "For-In Loop": {
    "prefix": "luafli",
    "description": "For-in loop",
    "body": [
      "for ${1:key}, ${2:value} in pairs(${3:table}) do",
      "\t${0:-- body}",
      "end"
    ]
  },
  "Function": {
    "prefix": "luafn",
    "description": "Define a function",
    "body": [
      "function ${1:functionName}(${2:args})",
      "\t${0:-- function body}",
      "end"
    ]
  },
  "If Statement": {
    "prefix": "luaif",
    "description": "If statement",
    "body": [
      "if ${1:condition} then",
      "\t${0:-- body}",
      "end"
    ]
  },
  "If-Else Statement": {
    "prefix": "luaife",
    "description": "If-Else statement",
    "body": [
      "if ${1:condition} then",
      "\t${2:-- body}",
      "else",
      "\t${0:-- else body}",
      "end"
    ]
  },
  "Local Function": {
    "prefix": "lualf",
    "description": "Define a local function",
    "body": [
      "local function ${1:functionName}(${2:args})",
      "\t${0:-- function body}",
      "end"
    ]
  },
  "Local Variable": {
    "prefix": "lualv",
    "description": "Declare a local variable",
    "body": [
      "local ${1:variableName} = ${0:value}"
    ]
  },
  "Metatable": {
    "prefix": "luamt",
    "description": "Create and set a metatable",
    "body": [
      "local ${1:mt} = {",
      "\t__index = ${1:mt},",
      "\t${0:-- other metatable fields}",
      "}",
      "",
      "setmetatable(${2:table}, ${1:mt})"
    ]
  },
  "Method": {
    "prefix": "luamd",
    "description": "Define a method for a class",
    "body": [
      "function ${1:ClassName}:${2:methodName}(${3:args})",
      "\t${0:-- method body}",
      "end"
    ]
  },
  "Module": {
    "prefix": "luamod",
    "description": "Create a module",
    "body": [
      "local ${1:moduleName} = {}",
      "",
      "${0:-- module body}",
      "",
      "return ${1:moduleName}"
    ]
  },
  "Print": {
    "prefix": "luap",
    "description": "Print to console",
    "body": [
      "print(${0:expression})"
    ]
  },
  "Repeat-Until Loop": {
    "prefix": "luaru",
    "description": "Repeat-Until loop",
    "body": [
      "repeat",
      "\t${1:-- body}",
      "until ${0:condition}"
    ]
  },
  "Require": {
    "prefix": "luareq",
    "description": "Require a module",
    "body": [
      "local ${1:moduleName} = require \"${2:module}\""
    ]
  },
  "String Format": {
    "prefix": "luasf",
    "description": "Format a string",
    "body": [
      "local ${1:result} = string.format(\"${2:format}\", ${3:args})"
    ]
  },
  "Table": {
    "prefix": "luat",
    "description": "Create a table",
    "body": [
      "local ${1:tableName} = {",
      "\t${0:-- table contents}",
      "}"
    ]
  },
  "Table Concat": {
    "prefix": "luatc",
    "description": "Concatenate a table",
    "body": [
      "table.concat(${1:tableName}, ${2:separator})"
    ]
  },
  "Table Insert": {
    "prefix": "luatr",
    "description": "Insert a value into a table",
    "body": [
      "table.insert(${1:tableName}, ${2:value})"
    ]
  },
  "Table Remove": {
    "prefix": "luatr",
    "description": "Remove a value from a table",
    "body": [
      "table.remove(${1:tableName}, ${2:index})"
    ]
  },
  "While Loop": {
    "prefix": "luawl",
    "description": "While loop",
    "body": [
      "while ${1:condition} do",
      "\t${0:-- body}",
      "end"
    ]
  }
}