{
  "anonymous function": {
    "prefix": "tsanf",
    "description": "anonymous function",
    "body": [
      "function (${1:args}: ${2:Type}): ${3:ReturnType} {",
      "  ${0}",
      "}"
    ]
  },
  "arrow function": {
    "prefix": "tsarf",
    "description": "arrow function",
    "body": ["(${1:args}: ${2:Type}): ${3:ReturnType} => ${4:expression}"]
  },
  "arrow function with body": {
    "prefix": "tsafb",
    "description": "arrow function with body",
    "body": ["(${1:args}: ${2:Type}): ${3:ReturnType} => {", "  ${0}", "}"]
  },
  "assertion": {
    "prefix": "tsas",
    "description": "type assertion",
    "body": ["${1:value} as ${2:Type}"]
  },
  "const assignment": {
    "prefix": "tsca",
    "description": "const assignment",
    "body": ["const ${1:name}: ${2:Type} = ${3:value}"]
  },
  "destructuring const assignment": {
    "prefix": "tsdca",
    "description": "destructuring const assignment",
    "body": ["const { ${1:prop1}, ${2:prop2} }: ${3:Type} = ${4:value}"]
  },
  "destructuring let assignment": {
    "prefix": "tsdla",
    "description": "destructuring let assignment",
    "body": ["let { ${1:prop1}, ${2:prop2} }: ${3:Type} = ${4:value}"]
  },
  "enum": {
    "prefix": "tsen",
    "description": "enum",
    "body": [
      "enum ${1:EnumName} {",
      "  ${2:Key1} = ${3:Value1},",
      "  ${4:Key2} = ${5:Value2}",
      "}"
    ]
  },
  "for in loop": {
    "prefix": "tsfil",
    "description": "for-in loop",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "  if (Object.prototype.hasOwnProperty.call(${2:object}, ${1:key})) {",
      "    const ${3:element}: ${4:Type} = ${2:object}[${1:key}];",
      "    ${0}",
      "  }",
      "}"
    ]
  },
  "for loop": {
    "prefix": "tsfl",
    "description": "for loop",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "  const ${3:element}: ${4:Type} = ${2:array}[${1:i}];",
      "  ${0}",
      "}"
    ]
  },
  "for of loop": {
    "prefix": "tsfol",
    "description": "for-of loop",
    "body": ["for (const ${1:element} of ${2:array}) {", "  ${0}", "}"]
  },
  "function apply": {
    "prefix": "tsfa",
    "description": "function apply",
    "body": [
      "${1:function}.apply<${2:ThisType}, ${3:ReturnType}>(${4:thisArg}, ${5:argsArray})"
    ]
  },
  "function bind": {
    "prefix": "tsfb",
    "description": "function bind",
    "body": ["${1:function}.bind<${2:ThisType}>(${3:thisArg}, ${4:argsList})"]
  },
  "function call": {
    "prefix": "tsfc",
    "description": "function call",
    "body": [
      "${1:function}.call<${2:ThisType}, ${3:ReturnType}>(${4:thisArg}, ${5:args})"
    ]
  },
  "generator function": {
    "prefix": "tsgf",
    "description": "generator function",
    "body": [
      "function* ${1:name}(${2:args}: ${3:Type}): Generator<${4:YieldType}, ${5:ReturnType}, ${6:NextType}> {",
      "  ${0}",
      "}"
    ]
  },
  "generic type": {
    "prefix": "tsgt",
    "description": "generic type",
    "body": ["${1:Type}<${2:T}>"]
  },
  "IIFE": {
    "prefix": "tsiife",
    "description": "Immediately Invoked Function Expression (IIFE)",
    "body": ["(() => {", "  ${0}", "})()"]
  },
  "if else statement": {
    "prefix": "tsife",
    "description": "if-else statement",
    "body": ["if (${1:condition}) {", "  ${2}", "} else {", "  ${0}", "}"]
  },
  "if statement": {
    "prefix": "tsif",
    "description": "if statement",
    "body": ["if (${1:condition}) {", "  ${0}", "}"]
  },
  "interface": {
    "prefix": "tsifc",
    "description": "interface",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:propertyName}: ${3:Type};",
      "  ${4:methodName}(${5:args}: ${6:Type}): ${7:ReturnType};",
      "}"
    ]
  },
  "intersection type": {
    "prefix": "tsit",
    "description": "intersection type",
    "body": ["${1:Type1} & ${2:Type2}"]
  },
  "let assignment": {
    "prefix": "tsla",
    "description": "let assignment",
    "body": ["let ${1:name}: ${2:Type} = ${3:value}"]
  },
  "named function": {
    "prefix": "tsnf",
    "description": "named function",
    "body": [
      "function ${1:name}(${2:args}: ${3:Type}): ${4:ReturnType} {",
      "  ${0}",
      "}"
    ]
  },
  "named generator function": {
    "prefix": "tsngf",
    "description": "named generator function",
    "body": [
      "function* ${1:name}(${2:args}: ${3:Type}): Generator<${4:YieldType}, ${5:ReturnType}, ${6:NextType}> {",
      "  ${0}",
      "}"
    ]
  },
  "nullish coalescing": {
    "prefix": "tsnc",
    "description": "nullish coalescing",
    "body": ["${1:value} ?? ${2:defaultValue}"]
  },
  "optional chaining": {
    "prefix": "tsoc",
    "description": "optional chaining",
    "body": ["${1:object}?.${2:property}"]
  },
  "reverse for loop": {
    "prefix": "tsrfl",
    "description": "reverse for loop",
    "body": [
      "for (let ${1:i} = ${2:array}.length - 1; ${1:i} >= 0; ${1:i}--) {",
      "  const ${3:element}: ${4:Type} = ${2:array}[${1:i}];",
      "  ${0}",
      "}"
    ]
  },
  "switch case": {
    "prefix": "tssw",
    "description": "switch case",
    "body": [
      "switch (${1:key}) {",
      "  case ${2:value}:",
      "    ${3}",
      "    break;",
      "  default:",
      "    ${0}",
      "}"
    ]
  },
  "ternary operator": {
    "prefix": "tsto",
    "description": "ternary operator",
    "body": ["${1:condition} ? ${2:expressionIfTrue} : ${3:expressionIfFalse}"]
  },
  "try catch": {
    "prefix": "tstc",
    "description": "try-catch",
    "body": ["try {", "  ${1}", "} catch (error: unknown) {", "  ${2}", "}"]
  },
  "try catch finally": {
    "prefix": "tstcf",
    "description": "try-catch-finally",
    "body": [
      "try {",
      "  ${1}",
      "} catch (error: unknown) {",
      "  ${2}",
      "} finally {",
      "  ${3}",
      "}"
    ]
  },
  "try finally": {
    "prefix": "tstf",
    "description": "try-finally",
    "body": ["try {", "  ${1}", "} finally {", "  ${2}", "}"]
  },
  "type alias": {
    "prefix": "tsta",
    "description": "type alias",
    "body": ["type ${1:TypeName} = ${2:Type};"]
  },
  "union type": {
    "prefix": "tsut",
    "description": "union type",
    "body": ["${1:Type1} | ${2:Type2}"]
  },
  "whileloop": {
    "prefix": "tswl",
    "description": "while loop",
    "body": ["while (${1:condition}) {", "  ${2}", "}"]
  }
}
