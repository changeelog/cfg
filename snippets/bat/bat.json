{
  "batch_header": {
    "prefix": "bh",
    "description": "Basic batch file header with UTF-8 and delayed expansion",
    "body": [
      "@echo off",
      "chcp 65001 > nul",
      "setlocal ${2|enabledelayedexpansion,disabledelayedexpansion|}",
      "",
      "rem ${1:Script description}",
      "",
      "$0"
    ]
  },
  "check_admin_privileges": {
    "prefix": "sadmincheck",
    "description": "Check if the script is running with admin privileges",
    "body": [
      ">nul 2>&1 net session || (",
      "    echo This script requires admin privileges.",
      "    exit /b 1",
      ")"
    ]
  },
  "check_available_disk_space": {
    "prefix": "sdiskchk",
    "description": "Check available disk space on a drive",
    "body": [
      "for /f \"tokens=3\" %%a in ('fsutil volume diskfree ${1:C:}') do (",
      "    set free_space=%%a",
      ")",
      "echo Available disk space: %free_space%"
    ]
  },
  "check_errorlevel": {
    "prefix": "bechk",
    "description": "Check error level with comparison operators",
    "body": [
      "if %errorlevel% ${1|geq,leq,equ,neq,gtr,lss|} ${2:number} (",
      "    echo Error level is ${1} ${2}",
      "    $0",
      ")"
    ]
  },
  "check_if_file_locked": {
    "prefix": "sfilelock",
    "description": "Check if a file is locked",
    "body": [
      "(call >nul 2>nul >\"${1:file}\" && echo File is not locked) || echo File is locked"
    ]
  },
  "check_network_connection": {
    "prefix": "snetcheck",
    "description": "Check network connection status",
    "body": [
      "ping -n 1 ${1:hostname} >nul && echo ${1:hostname} is reachable || echo ${1:hostname} is not reachable"
    ]
  },
  "cmd_args": {
    "prefix": "bcargs",
    "description": "Handle command line arguments",
    "body": [
      "if \"%1\"==\"\" (",
      "    echo Usage: %0 <argument>",
      "    exit /b 1",
      ")",
      "set \"arg1=%1\""
    ]
  },
  "compare_strings": {
    "prefix": "bcstr",
    "description": "Compare two strings",
    "body": [
      "if ${1|equ,neq,lss,leq,gtr,geq|} \"${2:string1}\" \"${3:string2}\" (",
      "    $0",
      ")"
    ]
  },
  "conditional_exec": {
    "prefix": "bccond",
    "description": "Execute command based on previous command's success",
    "body": [
      "${1:first_command} && ${2:success_command} || ${3:failure_command}"
    ]
  },
  "create_label": {
    "prefix": "flabel",
    "description": "Create a label in the script",
    "body": [":${1:label}"]
  },
  "dir_create": {
    "prefix": "bsdir",
    "description": "Create a directory if it doesn't exist",
    "body": ["if not exist \"${1:directoryPath}\" mkdir \"${1:directoryPath}\""]
  },
  "download_file_using_powershell": {
    "prefix": "sdownload",
    "description": "Download a file using PowerShell",
    "body": [
      "powershell -Command \"(New-Object Net.WebClient).DownloadFile('${1:url}', '${2:file_path}')\""
    ]
  },
  "else_statement": {
    "prefix": "felse",
    "description": "Else statement for if-else construct",
    "body": [") else (", "    $0", ")"]
  },
  "enable_delayed_expansion": {
    "prefix": "sedl",
    "description": "Enable delayed environment variable expansion",
    "body": ["setlocal enabledelayedexpansion"]
  },
  "error_handling": {
    "prefix": "behan",
    "description": "Basic error handling",
    "body": [
      "if errorlevel 1 (",
      "    echo An error occurred",
      "    exit /b 1",
      ")"
    ]
  },
  "file_exists_check": {
    "prefix": "sfchk",
    "description": "Check if a file exists",
    "body": [
      "if exist \"${1:filename}\" (",
      "    echo File exists",
      ") else (",
      "    echo File does not exist",
      ")"
    ]
  },
  "for_d_loop": {
    "prefix": "ffor_d",
    "description": "For /D loop",
    "body": [
      "for /D %%${1:d} in (${2:directory_pattern}) do (",
      "    echo %%${1:d}",
      "    $0",
      ")"
    ]
  },
  "for_f_loop": {
    "prefix": "ffor_f",
    "description": "For /F loop",
    "body": [
      "for /F \"tokens=${1:1}* delims=${2:,}\" %%${3:a} in (${4:file_or_command}) do (",
      "    echo %%${3:a}",
      "    $0",
      ")"
    ]
  },
  "for_l_loop": {
    "prefix": "ffor_l",
    "description": "For /L loop",
    "body": [
      "for /L %%${1:i} in (${2:start},${3:step},${4:end}) do (",
      "    echo %%${1:i}",
      "    $0",
      ")"
    ]
  },
  "for_loop": {
    "prefix": "ffor",
    "description": "For loop",
    "body": [
      "for %%${1:i} in (${2:item1 item2 item3}) do (",
      "    echo %%${1:i}",
      "    $0",
      ")"
    ]
  },
  "for_r_loop": {
    "prefix": "ffor_r",
    "description": "For /R loop",
    "body": [
      "for /R \"${1:rootPath}\" %%${2:f} in (${3:file_pattern}) do (",
      "    echo %%${2:f}",
      "    $0",
      ")"
    ]
  },
  "function": {
    "prefix": "ffn",
    "description": "Create a function in batch",
    "body": [":${1:functionName}", "$0", "goto :eof"]
  },
  "get_current_date": {
    "prefix": "vdate",
    "description": "Get the current date",
    "body": [
      "for /f \"tokens=1-4 delims=/ \" %%a in ('%DATE%') do (",
      "    set day=%%a",
      "    set month=%%b",
      "    set year=%%c",
      ")",
      "set \"currentDate=%year%-%month%-%day%\"",
      "echo Current date: %currentDate%"
    ]
  },
  "get_current_time": {
    "prefix": "vtime",
    "description": "Get the current time",
    "body": [
      "for /f \"tokens=1-3 delims=:\" %%a in ('%TIME%') do (",
      "    set hour=%%a",
      "    set minute=%%b",
      "    set second=%%c",
      ")",
      "set \"currentTime=%hour%:%minute%:%second%\"",
      "echo Current time: %currentTime%"
    ]
  },
  "get_environment_variable": {
    "prefix": "vgetenv",
    "description": "Get an environment variable value",
    "body": ["set ${1:variable_name}=%${1:variable_name}%"]
  },
  "goto_end_of_script": {
    "prefix": "fgotoe",
    "description": "Go to the end of the script",
    "body": ["goto :eof"]
  },
  "goto_label": {
    "prefix": "fgoto",
    "description": "Jump to a specific label in the script",
    "body": ["goto :${1:label}"]
  },
  "if_statement": {
    "prefix": "fif",
    "description": "If-else statement",
    "body": ["if ${1:condition} (", "    $0", ") else (", "    $2", ")"]
  },
  "logging_to_file": {
    "prefix": "llog",
    "description": "Log script output to a file",
    "body": [
      "set \"log_file=${1:logfile}.log\"",
      "echo Logging to %log_file%",
      "echo ${2:Log start message} >> %log_file%",
      "$0",
      "echo ${3:Log end message} >> %log_file%"
    ]
  },
  "loop_over_files": {
    "prefix": "ffiles",
    "description": "Loop over files in directory",
    "body": [
      "for %%f in (${1:*.txt}) do (",
      "    echo Processing %%f",
      "    $0",
      ")"
    ]
  },
  "pause_script": {
    "prefix": "fpause",
    "description": "Pause the script execution",
    "body": ["pause"]
  },
  "push_directory": {
    "prefix": "spushd",
    "description": "Push directory onto stack and change to it",
    "body": ["pushd \"${1:directory}\"", "$0", "popd"]
  },
  "read_user_input": {
    "prefix": "vread",
    "description": "Read user input",
    "body": ["set /p \"${1:variable}=${2:Enter value: }\""]
  },
  "retry_block": {
    "prefix": "fretry",
    "description": "Retry block for command execution",
    "body": [
      "set retry_count=0",
      ":retry_loop",
      "set /a retry_count+=1",
      "${1:command}",
      "if errorlevel 1 if %retry_count% lss ${2:retry_limit} (",
      "    echo Retry %retry_count%...",
      "    timeout /t ${3:delay_seconds} > nul",
      "    goto retry_loop",
      ")"
    ]
  },
  "run_command_with_retry": {
    "prefix": "fretrycmd",
    "description": "Run a command with a retry mechanism",
    "body": [
      "set retry_count=0",
      ":retry",
      "set /a retry_count+=1",
      "${1:command}",
      "if errorlevel 1 if %retry_count% lss ${2:retry_limit} (",
      "    echo Retry %retry_count%...",
      "    timeout /t ${3:delay_seconds} > nul",
      "    goto retry",
      ")"
    ]
  },
  "set_environment_variable": {
    "prefix": "vsetenv",
    "description": "Set an environment variable",
    "body": ["setx ${1:variable_name} \"${2:value}\""]
  },
  "set_variable": {
    "prefix": "vset",
    "description": "Set a variable",
    "body": ["set \"${1:variable}=${2:value}\""]
  },
  "start_new_process": {
    "prefix": "sstart",
    "description": "Start a new process",
    "body": ["start \"\" ${1:command}"]
  },
  "terminate_process": {
    "prefix": "sterm",
    "description": "Terminate a process by its name",
    "body": ["taskkill /F /IM ${1:process_name}.exe /T"]
  },
  "timed_command": {
    "prefix": "ftime",
    "description": "Execute a command after a delay",
    "body": ["timeout /t ${1:seconds} /nobreak > nul", "${2:command}"]
  },
  "turn_echo_off": {
    "prefix": "sechooff",
    "description": "Turn command-echoing off",
    "body": ["@echo off"]
  },
  "wait_for_keypress": {
    "prefix": "fwaitkey",
    "description": "Wait for a keypress",
    "body": ["echo Press any key to continue...", "pause >nul"]
  }
}
